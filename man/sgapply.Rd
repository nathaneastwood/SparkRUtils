% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sgapply.R
\name{sgapply}
\alias{sgapply}
\title{Safe \code{gapply}}
\usage{
sgapply(df, groups, fn, schema)
}
\arguments{
\item{df}{A \code{SparkDataFrame}.}

\item{groups}{\code{character(n)}. The names of the columns to group over.}

\item{fn}{A \code{function} to run against each group of data. The function must use \code{df} as its first argument.}

\item{schema}{\code{character(1)}. The schema which represents the final Spark DataFrame output.}
}
\value{
A \code{SparkDataFrame}.
}
\description{
A simple wrapper around \code{\link[SparkR:gapply]{SparkR::gapply()}} which provides the following safety checks:
\enumerate{
\item The specified schema contains data types which can be converted to from the R types, otherwise fails early.
\item The number of columns match between the node's returned \code{data.frame} and the schema.
\item The column names match between the node's returned \code{data.frame} and the schema.
\item The column type(s) of the node's returned \code{data.frame} match with the column type(s) specified in the schema.
}
}
\examples{
\dontrun{
sparkR.session()

data <- as.DataFrame(
  data.frame(
    dateTime = rep(
      seq(from = as.POSIXct("2020-01-01 00:00:00"), to = as.POSIXct("2020-01-01 00:01:50"), by = "10 s"),
      2
    ),
    group = rep(c("group_1", "group_2"), each = 6),
    value = c(rnorm(6), runif(6))
  )
)

# The following fails because value should be a double
collect(sgapply(
  df = data,
  groups = "group",
  fn = function(df) {
    df$mean_value <- mean(df$value, na.rm = TRUE)
    df
  },
  schema = "dateTime timestamp, group string, value integer, mean_value double"
))

# The following fails before computation because value contains a Spark data type which cannot be converted.
collect(sgapply(
  df = data,
  groups = "group",
  fn = function(df) {
    df$mean_value <- mean(df$value, na.rm = TRUE)
    df
  },
  schema = "dateTime timestamp, group string, value decimal(38,6), mean_value double"
))
}

}
